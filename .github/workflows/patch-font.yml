name: "Patch Iosevka"
on:
  workflow_dispatch: {} # Allow to run manually the workflow
  schedule:
    - cron: "0 17 * * 5" # Run at 17:00 on Friday

permissions:
  contents: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      needs_patch: ${{ steps.version-check.outputs.needs_patch }}
      matrix: ${{ steps.matrix-build.outputs.matrix }}
      release_tag: ${{ steps.version-check.outputs.release_tag }}
      work_dir: ${{ steps.prepare.outputs.work_dir }}
      font_forge_name: ${{ steps.prepare.outputs.font_forge_name }}
      font_patcher_name: ${{ steps.prepare.outputs.font_patcher_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Prepare env
        id: prepare
        run: |
          WORK_DIR="/tmp/iosevka-patch"
          echo "WORK_DIR=${WORK_DIR}" >> "$GITHUB_ENV"
          echo "work_dir=${WORK_DIR}" >> "$GITHUB_OUTPUT"
          IOSEVKA_RELEASE_METADATA_PATH="${WORK_DIR}/iosevka-latest-release.json"
          echo "IOSEVKA_RELEASE_METADATA_PATH=${IOSEVKA_RELEASE_METADATA_PATH}" >> "$GITHUB_ENV"
          FONTFORGE_NAME="FontForge.AppImage"
          echo "FONTFORGE_NAME=${FONTFORGE_NAME}" >> "$GITHUB_ENV"
          echo "font_forge_name=${FONTFORGE_NAME}" >> "$GITHUB_OUTPUT"
          FONT_PATCHER_NAME="FontPatcher.zip"
          echo "FONT_PATCHER_NAME=${FONT_PATCHER_NAME}" >> "$GITHUB_ENV"
          echo "font_patcher_name=${FONT_PATCHER_NAME}" >> "$GITHUB_OUTPUT"
          FONT_PATCHER_DIR="${WORK_DIR}/font-patcher"
          echo "FONT_PATCHER_DIR=${FONT_PATCHER_DIR}" >> "$GITHUB_ENV"
      - name: Create base work dir
        run: mkdir -p ${WORK_DIR}
      - name: Get Iosevka latest release metadata
        run: |
          curl -fsSL \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/be5invis/Iosevka/releases/latest > "${IOSEVKA_RELEASE_METADATA_PATH}"
      - name: Check if release is already patched
        id: version-check
        run: |
          RELEASE_TAG="$(jq -r '.tag_name' "${IOSEVKA_RELEASE_METADATA_PATH}")"
          echo "release_tag=${RELEASE_TAG}" >> "$GITHUB_OUTPUT"
          if grep "${RELEASE_TAG}" < <(git tag --list); then
            echo "::warning ::Latest release already patched."
            echo "needs_patch=false" >> "${GITHUB_OUTPUT}"
            exit 0
          fi
          IOSEVKA_VERSION="${RELEASE_TAG#v}"
          echo "IOSEVKA_VERSION=${IOSEVKA_VERSION}" >> "$GITHUB_ENV"
          echo "New release: ${IOSEVKA_VERSION}"
          if grep '-' <<< "${IOSEVKA_VERSION}"; then
            echo "::warning ::Latest release is a prerelease. It will be skipped"
            echo "needs_patch=false" >> "${GITHUB_OUTPUT}"
            exit 0
          fi
          echo "needs_patch=true" >> "${GITHUB_OUTPUT}"
      - name: Build matrix
        id: matrix-build
        if: ${{ steps.version-check.outputs.needs_patch == 'true' }}
        run: |
          echo "matrix=$(jq -c '[ .assets[] | select(.name | test("PkgTTF-Iosevka.*\\.zip")) | .name + "," + .url ][:2]' "${IOSEVKA_RELEASE_METADATA_PATH}")" >> "${GITHUB_OUTPUT}"
      - name: Download latest FontForge AppImage
        if: ${{ steps.version-check.outputs.needs_patch == 'true' }}
        run: |
          FONTFORGE_URL="$(curl -fsSL \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/fontforge/fontforge/releases/latest | jq -r '.assets[] | select(.name | test("FontForge.*\\.AppImage")) | .url')"
          curl -fsSL \
            -H "Accept: application/octet-stream" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -o "${WORK_DIR}/${FONTFORGE_NAME}" \
            "${FONTFORGE_URL}"
          chmod u+x "${WORK_DIR}/${FONTFORGE_NAME}"
      - name: Upload FontForge AppImage
        if: ${{ steps.version-check.outputs.needs_patch == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare.outputs.font_forge_name }}
          path: ${{ steps.prepare.outputs.work_dir }}/${{ steps.prepare.outputs.font_forge_name }}
      - name: Download latest Nerd Font patcher
        if: ${{ steps.version-check.outputs.needs_patch == 'true' }}
        run: |
          FONT_PATCHER_URL="$(curl -fsSL \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/ryanoasis/nerd-fonts/releases/latest | jq -r '.assets[] | select(.name == "FontPatcher.zip") | .url')"
          curl -fsSL \
            -H "Accept: application/octet-stream" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -o "${WORK_DIR}/${FONT_PATCHER_NAME}" \
            "${FONT_PATCHER_URL}"
          unzip -o "${WORK_DIR}/${FONT_PATCHER_NAME}" -d "${FONT_PATCHER_DIR}"
      - name: Upload FontPatcher
        if: ${{ steps.version-check.outputs.needs_patch == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare.outputs.font_patcher_name }}
          path: ${{ steps.prepare.outputs.work_dir }}/${{ steps.prepare.outputs.font_patcher_name }}
  patch:
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.needs_patch }}
    outputs:
      needs_patch: ${{ needs.setup.outputs.needs_patch }}
      release_tag: ${{ needs.setup.outputs.release_tag }}
      font_forge_name: ${{ needs.setup.outputs.font_forge_name }}
      font_patcher_name: ${{ needs.setup.outputs.font_patcher_name }}
    needs: setup
    strategy:
      matrix:
        font: ${{ fromJSON(needs.setup.outputs.matrix) }}
    steps:
      - name: Install libfuse2
        run: |
          sudo apt update
          sudo apt install -y libfuse2
      - name: Download FontForge and FontPatcher artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: Setup job
        run: |
          ls -l -R
          exit 1

          WORK_DIR="/tmp/iosevka-patch"
          BASE_INPUT_DIR="${WORK_DIR}/input"
          BASE_OUTPUT_DIR="${WORK_DIR}/output"

          echo "WORK_DIR=${WORK_DIR}" >> "$GITHUB_ENV"
          echo "BASE_INPUT_DIR=${BASE_INPUT_DIR}" >> "$GITHUB_ENV"
          echo "BASE_OUTPUT_DIR=${BASE_OUTPUT_DIR}" >> "$GITHUB_ENV"
      - name: Create base work dir
        run: mkdir -p ${WORK_DIR}
      - name: Download font files
        id: download-font
        run: |
          mkdir -p "${BASE_INPUT_DIR}"
          RELEASE_TAG="${{ needs.setup.outputs.release_tag  }}"
          IOSEVKA_VERSION=${RELEASE_TAG#v}
          ASSET_NAME="$(echo "${{ matrix.font }}" | cut -d ',' -f 1)"
          ASSET_NAME="${ASSET_NAME#PkgTTF-}"
          ASSET_NAME="${ASSET_NAME%-"${IOSEVKA_VERSION}".zip}"
          ASSET_URL="$(echo "${{ matrix.font }}" | cut -d ',' -f 2)"
          echo "asset_name=${ASSET_NAME}" >> "${GITHUB_OUTPUT}"
          echo "ASSET_NAME=${ASSET_NAME}" >> "${GITHUB_ENV}"
          echo "ASSET_NAME=${ASSET_NAME}"
          echo "ASSET_URL=${ASSET_URL}"
          curl -fsSL \
            -H "Accept: application/octet-stream" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -o "${BASE_INPUT_DIR}/${ASSET_NAME}.zip" \
            "${ASSET_URL}"
          unzip -o "${BASE_INPUT_DIR}/${ASSET_NAME}.zip" -d "${BASE_INPUT_DIR}/${ASSET_NAME}"
      - name: Patch fonts
        id: patch-font
        run: |
          echo "Patching ${ASSET_NAME} into ${BASE_OUTPUT_DIR}/${ASSET_NAME}"
          mkdir -p "${BASE_OUTPUT_DIR}/${ASSET_NAME}"
          find "${BASE_INPUT_DIR}/${ASSET_NAME}" -type f | \
          parallel echo "Patching {}" \; "${GITHUB_WORKSPACE}/${{ needs.setup.outputs.font_forge_name }}" -script "${GITHUB_WORKSPACE}/font-patcher" "{}" --quiet --no-progressbars --complete -out "${BASE_OUTPUT_DIR}/${ASSET_NAME}"
          echo "output_dir=${BASE_OUTPUT_DIR}/${ASSET_NAME}" >> "${GITHUB_OUTPUT}"
      - name: Share output
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.download-font.outputs.asset_name }}
          path: ${{ steps.patch-font.outputs.output_dir }}
          retention-days: 1

  commit:
    runs-on: ubuntu-latest
    if: ${{ needs.patch.outputs.needs_patch }}
    needs: patch
    steps:
      # TODO: maybe remove artifacts from step 'setup'
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Remove old font files
        run: |
          find ./ -mindepth 1 -maxdepth 1 -type d -not -name '.*' -exec rm -r {} \;
      - name: Load artifacts
        uses: actions/download-artifact@v4
      - name: Debug ls
        run: |
          ls -l
      - name: Git config
        run: |
          git config --global user.name "CI"
          git config --global user.email "${{ github.triggering_actor }}@users.noreply.github.com"
      - name: Commit, Tag and Push
        run: |
          git status --short
        #  git add --all
        #  git commit -m "chore: update patched fonts"
        #  git tag "${{ needs.patch.outputs.release_tag }}" -m "Patched Iosevka ${{ needs.patch.outputs.release_tag }}"
        #  git push --follow-tags
